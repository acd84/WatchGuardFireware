let EventResultType = dynamic (["Deny","Drop","Drop ICMP","Reset","Reset Source","Reset Destination"]);
let PublicCompanyIPAddress = dynamic (["2.2.2.2","2.2.2.3"]); //To be used at NetworkDirection. IPs listed as example.
let DeniedWatchGuardFirewareNetworkSessionLogs = Syslog
	// -- Filter only 'Denied' data from 'firewall' process excluding 'fqdn_dst_match' variable
    | where ProcessName == "firewall" and SyslogMessage has_cs ("Deny") and SyslogMessage !has_cs ("fqdn_dst_match")
	// -- Parsing common elements from all denied events logged
	// -- DvcInboundInterface and DvcOutboundInterface will only work if interface naming at Fireware device has no whitespaces. At logging, there's no delimiter for these variables that come in succesively.
    | parse-where
        SyslogMessage with
        "msg_id=" MessageId:string
        " " DvcAction:string
        " " DvcInboundInterface:string
        " " DvcOutboundInterface:string
        " " IpPktLen:int
        " " Protocol:string
        " " IphLen:int
        " " TTL:int
        " " SrcIpAddr:string
        " " DstIpAddr:string
        " " RawData:string
	| extend
		// -- Network Data
		NetworkProtocol = toupper(Protocol),
		SrcPortNumber = toint(extract(@"(\d+\s)", 1, RawData)),
		DstPortNumber = toint(extract(@"(\s\d+\s)", 1, RawData)),
		SrcIpAddrDir = iff((ipv4_is_private(SrcIpAddr) or has_any_ipv4_prefix(SrcIpAddr, '224.', '169.254.') or SrcIpAddr has_any (PublicCompanyIPAddress)), 'Private',	'Public'),
		DstIpAddrDir = iff((ipv4_is_private(DstIpAddr) or has_any_ipv4_prefix(DstIpAddr, '224.', '169.254.') or DstIpAddr has_any (PublicCompanyIPAddress)), 'Private',	'Public'),
		NetworkIcmpId = extract(@"id=(\d+\s)", 1, RawData),
		NetworkIcmpSeq = extract(@"seq=(\d+\s)", 1, RawData),
		EventMessage = extract("msg=\"(.*?)\"", 1, RawData),
		SrcGeoCountry = extract("geo_src=\"(.*?)\"", 1, RawData),
		DstGeoCountry = extract("geo_dst=\"(.*?)\"", 1, RawData),
		NetworkConnectionHistory = extract("offset ((.*?) win (.*?) )", 1, RawData), // TCP Offset
		NetworkRuleName = replace("-00", "", extract(@"\s\(([-\w\s]*?(-00|\sPolicy|DVCP-BOVPN-Allow-in))\)$", 1, RawData, typeof(string))),
		// -- Host Normalization
		SrcHostname = SrcIpAddr,
		DstHostname = DstIpAddr,
		// -- User Data
		SrcUsername = extract("src_user=\"(.*?)\"", 1, RawData),
		DstUsername = extract("dst_user=\"(.*?)\"", 1, RawData),
		// -- Application
		SrcAppName = extract("app_name=\"(.*?)\"", 1, RawData),
		SrcAppId = extract("app_id=\"(.*?)\"", 1, RawData),
		AppCatName = extract("cat_name=\"(.*?)\"", 1, RawData),
		AppCatId = extract("app_cat_id=\"(.*?)\"", 1, RawData),
		AppBehName = extract("app_beh_name=\"(.*?)\"", 1, RawData),
		AppCtlDisp = extract("app_ctl_disp=\"(.*?)\"", 1, RawData),
		AppSigVers = extract("sig_vers=\"(.*?)\"", 1, RawData),
		AppControlAction = extract("action=\"(.*?)\"", 1, RawData),
		AppRouteType = extract("route_type=\"(.*?)\"", 1, RawData),
		// -- Inspection
		ThreatName = extract("signature_name=\"(.*?)\"", 1, RawData),
		ThreatCategory = extract("signature_cat=\"(.*?)\"", 1, RawData),
		ThreatId = extract("signature_id=\"(.*?)\"", 1, RawData),
		ThreatRiskLevelOriginal = tostring(extract("severity=\"(.*?)\"", 1, RawData));
let DeniedFQDNWatchGuardFirewareNetworkSessionLogs = Syslog
	// -- Filter only 'Denied' data from 'firewall' process including 'fqdn_dst_match' variable
    | where ProcessName == "firewall" and SyslogMessage has_cs ("Deny") and SyslogMessage has_cs ("fqdn_dst_match")
	// -- Parsing common elements from all denied events logged
	// -- DvcInboundInterface and DvcOutboundInterface will only work if interface naming at Fireware device has no whitespaces. At logging, there's no delimiter for these variables that come in succesively.
    | parse-where
        SyslogMessage with
        "msg_id=" MessageId:string
        " " EventOriginalResultDetails:string
        " " DvcAction:string
        " " DvcInboundInterface:string
        " " DvcOutboundInterface:string
        " " IpPktLen:int
        " " Protocol:string
        " " IphLen:int
        " " TTL:int
        " " SrcIpAddr:string
        " " DstIpAddr:string
        " " RawData:string
	| extend
		// -- Network Data
		NetworkProtocol = toupper(Protocol),
		SrcPortNumber = toint(extract(@"(\d+\s)", 1, RawData)),
		DstPortNumber = toint(extract(@"(\s\d+\s)", 1, RawData)),
		SrcIpAddrDir = iff((ipv4_is_private(SrcIpAddr) or has_any_ipv4_prefix(SrcIpAddr, '224.', '169.254.') or SrcIpAddr has_any (PublicCompanyIPAddress)), 'Private',	'Public'),
		DstIpAddrDir = iff((ipv4_is_private(DstIpAddr) or has_any_ipv4_prefix(DstIpAddr, '224.', '169.254.') or DstIpAddr has_any (PublicCompanyIPAddress)), 'Private',	'Public'),
		EventMessage = extract("msg=\"(.*?)\"", 1, RawData),
		SrcGeoCountry = extract("geo_src=\"(.*?)\"", 1, RawData),
		DstGeoCountry = extract("geo_dst=\"(.*?)\"", 1, RawData),
		NetworkConnectionHistory = extract("offset ((.*?) win (.*?) )", 1, RawData), // TCP Offset
		NetworkRuleName = replace("-00", "", extract(@"\s\(([-\w\s]*?(-00|\sPolicy|DVCP-BOVPN-Allow-in))\)$", 1, RawData, typeof(string))),
		// -- Application
		AppRouteType = extract("route_type=\"(.*?)\"", 1, RawData),
		// -- Event
		EventResultDetails = "FQDN Destination Match",
		// -- Host Normalization
			SrcHostname = SrcIpAddr,
			DstHostname = DstIpAddr;
union isfuzzy=true
    DeniedWatchGuardFirewareNetworkSessionLogs,
    DeniedFQDNWatchGuardFirewareNetworkSessionLogs
    | project-rename
        // -- Device
        Dvc = Computer
    | extend
        // -- ASIM
        _ResourceId = iff(isempty(_ResourceId), 'la_omsagent', _ResourceId), // In case OMSagent not populating this field
        // -- Device
        DvcHostname = replace("_", "", HostName), // DvcHostname can not have underscores '_', only letters, numbers and hyphens
        DvcIpAddr = iff(HostIP == "Unknown IP", "", HostIP), // In case OMSagent not detecting the device IP
        // -- Event
        EventCount = int(1),
        EventVendor = 'WatchGuard',
        EventProduct = 'Fireware',
        EventSchema = 'NetworkSession',
        EventSchemaVersion = '0.2.3',
        EventStartTime = TimeGenerated,
        EventEndTime = TimeGenerated,
        EventType = 'NetworkSession',
        EventResult = iff(DvcAction has_any (EventResultType), 'Failure', 'Success'),
        EventSeverity = iff(DvcAction has_any (EventResultType), 'Low', 'Informational'),
        // -- Network
        NetworkDirection = case(
            (SrcIpAddrDir == 'Private' and DstIpAddrDir == 'Private'), 'Local',
            (SrcIpAddrDir == 'Private' and DstIpAddrDir == 'Public'), 'Outbound',
            (SrcIpAddrDir == 'Public' and DstIpAddrDir == 'Private'), 'Inbound',
            (SrcIpAddrDir == 'Public' and DstIpAddrDir == 'Public'), 'External',
            'NA'),
        // -- User Data
        SrcUsernameType = case(isempty(SrcUsername), "", SrcUsername has_cs "@", "UPN", "Simple"),
        DstUsernameType = case(isempty(DstUsername), "", DstUsername has_cs "@", "UPN", "Simple"),
        // -- Application
        AppType = 'Other', // Values: Process, Service, Resource, URL, SaaS application, CloudService and Other
        // -- Inspection		
        ThreatRiskLevel = toint(todynamic(ThreatRiskLevelOriginal)*int(20)), // Normalized between 1-100 from 1-5
        // -- Aliases
        Hostname = DstHostname,
        Rule = NetworkRuleName,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        Dst = DstIpAddr,
        User = DstUsername
    | project-away
        EventTime, 
        Facility, 
        SeverityLevel,
        MessageId, 
        SrcIpAddrDir, 
        DstIpAddrDir, 
        Protocol, 
        SyslogMessage, 
        ProcessID, 
        SourceSystem, 
        MG
